"""
Flask application deployed on Google App Engine that sends a weekly email with
content ideas generated by the summarizer. It retrieves the most recent markdown file
from a GCS bucket, formats it into both plain-text and HTML using `markdown`, and
sends it via Gmail SMTP using a secure App Password stored in Secret Manager.
"""

import os
import smtplib
from datetime import datetime
from flask import Flask
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from google.cloud import storage, secretmanager
import markdown

app = Flask(__name__)

# Load configuration from environment
GMAIL_USER   = os.environ['GMAIL_USER']
EMAIL_TO     = os.environ['EMAIL_TO']
BUCKET_NAME  = os.environ['BUCKET_NAME']
IDEAS_PREFIX = os.environ['IDEAS_PREFIX']

# Initialize Google Cloud clients
storage_client = storage.Client()
secret_client = secretmanager.SecretManagerServiceClient()

# Secret Manager resource name for the Gmail App Password
project_id = os.environ.get('GOOGLE_CLOUD_PROJECT')
secret_name = f"projects/{project_id}/secrets/.../versions/latest"

def get_app_password():
    response = secret_client.access_secret_version(request={"name": secret_name})
    return response.payload.data.decode("utf-8")

@app.route('/tasks/send-ideas')
def send_ideas():
    # 1) Retrieve the Gmail App Password
    GMAIL_PASS = get_app_password()

    # 2) List all blobs under the prefix and pick the newest by creation time
    blobs = list(storage_client.list_blobs(BUCKET_NAME, prefix=IDEAS_PREFIX))
    if not blobs:
        return 'No ideas found', 404
    latest_blob = max(blobs, key=lambda b: b.time_created)

    # 3) Download the Markdown content
    md_content = latest_blob.download_as_text()

    # 4) Format a human-friendly date for the email subject, fallback to blob time
    filename = latest_blob.name.split('/')[-1]
    try:
        # Expect filenames like ideas_YYYYMMDD_HHMMSS.md
        timestamp = filename.rsplit('_', 1)[-1].replace('.md', '')
        dt = datetime.strptime(timestamp, '%Y%m%d_%H%M%S')
    except Exception:
        # Fallback to creation time of the blob
        dt = latest_blob.time_created
    # Create readable string, stripping any leading zero in day
    date_str = dt.strftime('%B %d, %Y').replace(' 0', ' ')
    subject = f"Weekly Content Ideas â€” {date_str}"

    # 5) Compose a multipart email with both plain-text and HTML
    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From']    = GMAIL_USER
    msg['To']      = EMAIL_TO

    intro_text = "Hello!\n\n"
    plain_text = intro_text + md_content

    html_intro = "<p>Hello!</p>"
    html_body = markdown.markdown(md_content)
    html_content = html_intro + html_body

    msg.attach(MIMEText(plain_text, 'plain'))
    msg.attach(MIMEText(html_content,  'html'))

    # 6) Send the email via Gmail SMTP
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login(GMAIL_USER, GMAIL_PASS)
        server.sendmail(
            GMAIL_USER,
            [addr.strip() for addr in EMAIL_TO.split(',')],
            msg.as_string()
        )

    return '', 204  # HTTP 204 indicates success to cron

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
